#!/usr/bin/env bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+      ${SCRIPT_NAME} args ...
#%
#% DESCRIPTION
#%      Interactive installer for wordpress and wordpress demo data.
#%
#%      Script will:
#%      - download and install wordpress core with specified version
#%      - create a wp-config.php or read an existing one for install
#%      - install demo data if required
#%
#% OPTIONS
#%      --php=[path]                Optional path to PHP executable in case "php" env variable is not found or not wanted
#%      --wp-path=[path]            Expects the relative download/install path from
#%                                  relative from where this installer is executed
#%      --wp-url=[url]              Expects the url (without http(s)://)
#%                                  under which wordpress install will be running
#%      --wp-version=[version]      Expects wordpress versions string as on
#%                                  https://codex.wordpress.org/WordPress_Versions
#%      --wp-demo-data=[y|n]        Expects value "y" or "n" whether to install
#%                                  demo data
#%
#%      -h, --help                  Print this help
#%      -v, --version               Print script information
#%
#% EXAMPLES
#%      ${SCRIPT_NAME} -o --wp-url=wordpress.test --wp-version=4.7.5
#%
#================================================================
#- IMPLEMENTATION
#-      version         ${SCRIPT_NAME} 0.0.5
#-      author          Frank Mueller (setcooki)
#-      copyright       Copyright (c) http://set.cooki.me
#-      license         MIT License
#-
#================================================================
#  HISTORY
#       2017/06/15 : setcooki : script creation
#       2017/06/18 : setcooki : adds possibility to pass arguments
#       2017/11/21 : setcooki : add possibility to define WP_VERSION file at script location
#       2017/11/22 : setcooki : add new run time option --wp-path
#       2018/30/01 : setcooki : major overhaul of script + adding option for using custom php executable
#       2018/06/02 : setcooki : add mysql executable is check
#       2019/10/26 : setcooki : prefix fix
#
#================================================================
# END_OF_HEADER
#================================================================

#TODO: if database is already installed dont output login with admin admin

SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

USAGE() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
HELP() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
INFO() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }

if [[ ( $@ == "--help") ||  $@ == "-h" ]]
then
    HELP
	exit 0
fi;

if [[ ( $@ == "--version") ||  $@ == "-v" ]]
then
    INFO
	exit 0
fi;

#functions
trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

#declare variables
PHP=""
DIR="$( cd "$( dirname "$0" )" && pwd )"
REPO_PATH="https://raw.githubusercontent.com/setcooki/wp-installer/master"
DB_NAME=""
DB_USER=""
DB_PASS=""
DB_HOST=""
DB_PREFIX="wp_"
WP_CLI="./wp-cli.phar"
WP_PATH=""
WP_RELATIVE_PATH=""
WP_URL=""
WP_VERSION=""
WP_DEMO_DATA=""
WP_CHECK=""
WP_IMPORTER=""

#parse command line arguments
for i in "$@"
do
case $i in
    --php=*)
    PHP="${i#*=}"
    shift # past argument=value
    ;;
    --wp-url=*)
    WP_URL="${i#*=}"
    shift # past argument=value
    ;;
    --wp-path=*)
    WP_PATH="${i#*=}"
    shift # past argument=value
    ;;
    --wp-version=*)
    WP_VERSION="${i#*=}"
    shift # past argument=value
    ;;
    --wp-demo-data=*)
    WP_DEMO_DATA="${i#*=}"
    if [[ "$WP_DEMO_DATA" != "y" ]] && [[ "$WP_DEMO_DATA" != "n" ]];
    then
        echo -e "> Value for --wp-demo-data must be \"y\" or \"n\""
        exit 1;
    fi;
    shift # past argument=value
    ;;
    *)
    # unknown option
    ;;
esac
done

echo -e "Welcome to wordpress demo + data installer"

if [[ ( -z "$PHP" ) && ( ! -x "$(command -v php)" ) ]];
then
    while true; do
        echo -n "Could not find php executable. Please specify path:"
        read PHP
        PHP=$(trim $PHP)
        if [ ! -z $PHP ]; then
            echo "> $PHP"; break;
        fi;
        sleep .5
    done;
fi;

if [ ! -x "$(command -v mysql)" ];
then
    echo -n "Could not find 'mysql' executable. Aborting now ..."
    exit 1
fi;

if [ ! -f "$WP_CLI" ];
then
    echo -e "> Downloading wp-cli now ..."
    curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    chmod +x ./wp-cli.phar
else
    echo -e "> Updating wp-cli now ..."
    $WP_CLI cli update
fi;

chmod +x $WP_CLI

sleep .5

if [ -z "$WP_URL" ];
then
    while true; do
        echo -n "Enter wordpress site url and press [ENTER]:"
        read WP_URL
        WP_URL=$(trim $WP_URL)
        if [ ! -z $WP_URL ]; then
            echo "> $WP_URL"; break;
        fi;
        sleep .5
    done;
else
    echo -e "> Using wordpress site url: $WP_URL"
fi;

sleep .5

if [ -z "$WP_PATH" ];
then
    while true; do
        echo -n "Enter wordpress relative install/download path and press [ENTER]:"
        read WP_PATH
        WP_PATH=$(trim $WP_PATH)
        if [ ! -z $WP_PATH ]; then
            echo "> $WP_PATH"; break;
        fi;
        sleep .5
    done;
else
    echo -e "> Using wordpress path: $WP_PATH"
fi;

WP_PATH=$(trim $WP_PATH)
WP_PATH=${WP_PATH%/}
WP_PATH=${WP_PATH#/}

if [ -z "$WP_PATH" ];
then
    WP_PATH="$PWD"
    WP_RELATIVE_PATH="."
else
    WP_RELATIVE_PATH="$WP_PATH"
fi;

sleep .5

if [ ! -f $WP_PATH/wp-config.php ]; then

    while true; do
        echo -n "Enter database name and press [ENTER]:"
        read DB_NAME
        DB_NAME=$(trim $DB_NAME)
        if [ ! -z $DB_NAME ]; then
            echo "> $DB_NAME"; break;
        fi;
    done;

    sleep .5

    while true; do
        echo -n "Enter database host and press [ENTER]:"
        read DB_HOST
        DB_HOST=$(trim $DB_HOST)
        if [ ! -z $DB_HOST ]; then
            echo "> $DB_HOST"; break;
        fi;
    done;

    sleep .5

    while true; do
        echo -n "Enter database user name and press [ENTER]:"
        read DB_USER
        DB_USER=$(trim $DB_USER)
        if [ ! -z $DB_USER ]; then
            echo "> $DB_USER"; break;
        fi;
    done;

    sleep .5

    while true; do
        echo -n "Enter database user password and press [ENTER]:"
        read DB_PASS
        DB_PASS=$(trim $DB_PASS)
        if [ ! -z $DB_PASS ]; then
            echo "> ******"; break;
        fi;
    done;

    sleep .5

    while true; do
        echo -n "Enter table prefix (or leave empty) and press [ENTER]:"
        read DB_PREFIX
        DB_PREFIX=$(trim $DB_PREFIX)
        if [ ! -z $DB_PREFIX ]; then
            echo "> $DB_PREFIX"; break;
        else
            break;
        fi;
    done;

    sleep .5

fi;

if [ -z "$WP_VERSION" ];
then
    echo -e -n "Enter wordpress version to install and press enter [ENTER] (leave empty for version defined in WP_VERSION file or from git repository): "
    read WP_VERSION
    WP_VERSION=$(trim $WP_VERSION)
    if [ -z $WP_VERSION ];
    then
        if [ -f "$DIR/WP_VERSION" ];
        then
             WP_VERSION=$(<"$DIR/WP_VERSION")
        else
             WP_VERSION="`wget -qO- $REPO_PATH/wp-version`"
        fi;
    fi;
    echo -e "> $WP_VERSION"
else
    echo -n "> Using wordpress version: $WP_VERSION"
fi;

sleep .5

if [ -z "$WP_DEMO_DATA" ];
then
    echo -e -n "Do you wish to install demo data [y/n]: "
    while true; do
        read yn
        if [ $yn == "y" ]
        then
            WP_DEMO_DATA="y"
            echo "> yes"; break;
        elif [  $yn == "n" ]
        then
            WP_DEMO_DATA="n"
            echo "> no"; break;
        else
            echo "Please answer with [y/n]"
        fi;
        sleep .5
    done;
else
    echo -n "> Using wordpress demo data: $WP_DEMO_DATA"
fi;

echo -e "Downloading and installing wordpress $WP_VERSION core now..."

# download core
if [ ! -f $WP_PATH/wp-load.php ];
then
    $PHP $WP_CLI core download --path=$WP_RELATIVE_PATH --version=$WP_VERSION --locale=en_US --force --quiet
    echo -e "> Wordpress core downloaded"
fi;

# create config if it does not exist
if [ ! -f $WP_PATH/wp-config.php ];
then
    $PHP $WP_CLI config create --path=$WP_RELATIVE_PATH --dbname=$DB_NAME --dbhost=$DB_HOST --dbuser=$DB_USER --dbpass=$DB_PASS --dbprefix=$DB_PREFIX --force
    echo -e "> wp-config.php created"
fi;

# if demo data check if database exists if not create and/or reset
if [ "$WP_DEMO_DATA" == "y" ];
then
    echo -e "> checking for database now ..."
    WP_CHECK="$($PHP $WP_CLI db check --path=$WP_RELATIVE_PATH --quiet > /dev/null 2>&1)"
    if [ $(echo $?) == "2" ]; then
        $PHP $WP_CLI db create --path=$WP_RELATIVE_PATH --quiet
    fi;
    $PHP $WP_CLI db reset --yes --path=$WP_RELATIVE_PATH --quiet
fi;

# install wp if not installed
if [[ ( ! $($PHP $WP_CLI core is-installed --path=$WP_RELATIVE_PATH --quiet) ) || ( "$WP_DEMO_DATA" == "y" ) ]];
then
    echo -e "> Installing wordpress now ..."
    $PHP $WP_CLI core install --path="$WP_RELATIVE_PATH" --url="$WP_URL" --title="base theme" --prompt=admin_user,admin_password,admin_email --skip-email
    $PHP $WP_CLI option update siteurl "$WP_URL" --path="$WP_RELATIVE_PATH" --url="$WP_URL"
    $PHP $WP_CLI option update home "$WP_URL" --path="$WP_RELATIVE_PATH" --url="$WP_URL"
    echo -e "> Install done - login to: $WP_URL/wp-admin with your admin user"
else
    echo -e "> Installed already - login to: $WP_URL/wp-admin with existing user"
fi;

# make a core update
if [ $($PHP $WP_CLI core version --path=$WP_RELATIVE_PATH --quiet) != $WP_VERSION ];
then
echo -e "> checking for core update now ..."
    $PHP $WP_CLI core update --path=$WP_RELATIVE_PATH --version=$WP_VERSION --locale=en_US --force --quiet
    $PHP $WP_CLI core update-db --path=$WP_RELATIVE_PATH
    echo -e "> Core update to version $WP_VERSION done"
fi;

# import demo data
if [ "$WP_DEMO_DATA" == "y" ];
then
    echo -e "> Installing demo data now ..."
    WP_IMPORTER="$($PHP $WP_CLI plugin is-installed wordpress-importer --path=$WP_RELATIVE_PATH --quiet)"
    if [ $(echo $?) == "1" ]; then
        $PHP $WP_CLI plugin install wordpress-importer --path=$WP_RELATIVE_PATH --force --quiet
    fi;
    $PHP $WP_CLI plugin activate wordpress-importer --path=$WP_RELATIVE_PATH --quiet
    echo -e "> Downloading demo data now ..."
    wget -Nnv $REPO_PATH/wp-data.xml
    echo -e "> Importing demo data now ..."
    WP_IMPORTER="$($PHP -d memory_limit=1024M $WP_CLI import $PWD/wp-data.xml --path=$WP_RELATIVE_PATH --authors=create --quiet)"
    echo -e "> Demo data has been installed"
    rm -rf $PWD/wp-data.xml
fi;

echo -e "> Done, good bye!"
exit 0;