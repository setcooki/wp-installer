#!/usr/bin/env bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+      ${SCRIPT_NAME} args ...
#%
#% DESCRIPTION
#%      Interactive installer for wordpress and wordpress demo data.
#%
#%      Script will:
#%      - download and install wordpress core with specified version
#%      - create a wp-config.php or read an existing one for install
#%      - install demo data if required
#%
#% OPTIONS
#%      --wp-url=[url]              Expects the url (without http(s)://)
#%                                  under which wordpress install will be running
#%      --wp-version=[version]      Expects wordpress versions string as on
#%                                  https://codex.wordpress.org/WordPress_Versions
#%      --wp-demo-data=[y|n]        Expects value "y" or "n" whether to install
#%                                  demo data
#%
#%      -h, --help                  Print this help
#%      -v, --version               Print script information
#%
#% EXAMPLES
#%      ${SCRIPT_NAME} -o --wp-url=wordpress.test --wp-version=4.7.5
#%
#================================================================
#- IMPLEMENTATION
#-      version         ${SCRIPT_NAME} 0.0.2
#-      author          Frank Mueller (setcooki)
#-      copyright       Copyright (c) http://set.cooki.me
#-      license         MIT License
#-
#================================================================
#  HISTORY
#       2017/06/15 : setcooki : script creation
#       2017/06/18 : setcooki : adds possibility to pass arguments
#
#================================================================
# END_OF_HEADER
#================================================================

SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

USAGE() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
HELP() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
INFO() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }

if [[ ( $@ == "--help") ||  $@ == "-h" ]]
then
    HELP
	exit 0
fi;

if [[ ( $@ == "--version") ||  $@ == "-v" ]]
then
    INFO
	exit 0
fi;

#functions
trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

#declare variables
DIR="$( cd "$( dirname "$0" )" && pwd )"
REPO_PATH="https://raw.githubusercontent.com/setcooki/wp-installer/master"
DB_NAME=''
DB_USER=''
DB_PASS=''
DB_HOST=''
WP_URL=''
WP_VERSION=''
WP_ADMIN_USER='admin'
WP_ADMIN_PASS='admin'
WP_DEMO_DATA=''
WP_CHECK=''
WP_IMPORTER=''

#parse command line arguments
for i in "$@"
do
case $i in
    --wp-url=*)
    WP_URL="${i#*=}"
    shift # past argument=value
    ;;
    --wp-version=*)
    WP_VERSION="${i#*=}"
    shift # past argument=value
    ;;
    --wp-demo-data=*)
    WP_DEMO_DATA="${i#*=}"
    if [[ "$WP_DEMO_DATA" != "y" || "$WP_DEMO_DATA" != "n" ]];
    then
        echo -e "> Value for --wp-demo-data must be \"y\" or \"n\""
        exit 1;
    fi;
    shift # past argument=value
    ;;
    *)
    # unknown option
    ;;
esac
done

echo -e "Welcome to wordpress demo + data installer"

if ! [ -x "$(command -v wp)" ];
then
    echo -e "> Downloading wp-cli now ..."
    wget -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
else
    echo -e "> Updating wp-cli now ..."
    wp cli update
fi;

sleep .5

if [ -z "$WP_URL" ];
then
    while true; do
        echo -n "Enter wordpress site url and press [ENTER]:"
        read WP_URL
        WP_URL=$(trim $WP_URL)
        if [ ! -z $WP_URL ]; then
            echo "> $WP_URL"; break;
        fi;
        sleep .5
    done;
else
    echo -n "> Using wordpress site url: $WP_URL"
fi;

sleep .5

if [ ! -f $PWD/wp-config.php ]; then

    while true; do
        echo -n "Enter database name and press [ENTER]:"
        read DB_NAME
        DB_NAME=$(trim $DB_NAME)
        if [ ! -z $DB_NAME ]; then
            echo "> $DB_NAME"; break;
        fi;
    done;

    sleep .5

    while true; do
        echo -n "Enter database host and press [ENTER]:"
        read DB_HOST
        DB_HOST=$(trim $DB_HOST)
        if [ ! -z $DB_HOST ]; then
            echo "> $DB_HOST"; break;
        fi;
    done;

    sleep .5

    while true; do
        echo -n "Enter database user name and press [ENTER]:"
        read DB_USER
        DB_USER=$(trim $DB_USER)
        if [ ! -z $DB_USER ]; then
            echo "> $DB_USER"; break;
        fi;
    done;

    sleep .5

    while true; do
        echo -n "Enter database user password and press [ENTER]:"
        read DB_PASS
        DB_PASS=$(trim $DB_PASS)
        if [ ! -z $DB_PASS ]; then
            echo "> ******"; break;
        fi;
    done;

    sleep .5

fi;

if [ -z "$WP_VERSION" ];
then
    echo -e -n "Enter wordpress version to install and press enter [ENTER] (leave empty for version defined in repository): "
    read WP_VERSION
    WP_VERSION=$(trim $WP_VERSION)
    if [ -z $WP_VERSION ];
    then
        WP_VERSION="`wget -qO- $REPO_PATH/wp-version`"
    fi;
    echo -e "> $WP_VERSION"
else
    echo -n "> Using wordpress version: $WP_VERSION"
fi;

sleep .5

if [ -z "$WP_DEMO_DATA" ];
then
    echo -e -n "Do you wish to install demo data [y/n]: "
    while true; do
        read yn
        if [ $yn == 'y' ]
        then
            WP_DEMO_DATA='y'
            echo "> yes"; break;
        elif [  $yn == 'n' ]
        then
            WP_DEMO_DATA='n'
            echo "> no"; break;
        else
            echo "Please answer with [y/n]"
        fi;
        sleep .5
    done;
else
    echo -n "> Using wordpress demo data: $WP_DEMO_DATA"
fi;

echo -e "Downloading and installing wordpress $WP_VERSION core now..."

# download core
if [ ! -f $PWD/wp-load.php ];
then
    wp core download --version=$WP_VERSION --locale=en_US --force --quiet
    echo -e "> Wordpress core downloaded"
fi;

# create config if it does not exist
if [ ! -f $PWD/wp-config.php ];
then
    wp core config --dbname=$DB_NAME --dbhost=$DB_HOST --dbuser=$DB_USER --dbpass=$DB_PASS --force
    echo -e "> wp-config.php created"
fi;

# if demo data check if database exists if not create and/or reset
if [ "$WP_DEMO_DATA" == "y" ];
then
    echo -e "> checking for database now ..."
    WP_CHECK="$(wp db check --quiet)"
    if [ $(echo $?) == "2" ]; then
        wp db create --quiet
    fi;
    wp db reset --yes --quiet
fi;

# install wp if not installed
if [[ ( ! $(wp core is-installed) ) || ( $WP_DEMO_DATA == 'y' ) ]];
then
    wp core install --url=$WP_URL --title=demo --admin_user=$WP_ADMIN_USER --admin_password=$WP_ADMIN_PASS --admin_email=$WP_ADMIN_USER@$WP_URL
    echo -e "> Install done - login to: $WP_URL/wp-admin with: $WP_ADMIN_USER, $WP_ADMIN_PASS"
else
    echo -e "> Installed already - login to: $WP_URL/wp-admin with existing user"
fi;

# make a core update
if [ $(wp core version) != $WP_VERSION ];
then
echo -e "> checking for core update now ..."
    wp core update --version=$WP_VERSION --locale=en_US --force --quiet
    wp core update-db
    echo -e "> Core update to version $WP_VERSION done"
fi;

# import demo data
if [ "$WP_DEMO_DATA" == "y" ];
then
    echo -e "> Installing demo data now ..."
    WP_IMPORTER="$(wp plugin is-installed wordpress-importer --quiet)"
    if [ $(echo $?) == "1" ]; then
        wp plugin install wordpress-importer --force --quiet
    fi;
    wp plugin activate wordpress-importer --quiet
    echo -e "> Downloading demo data now ..."
    wget -Nnv $REPO_PATH/wp-data.xml
    echo -e "> Importing demo data now ..."
    WP_IMPORTER="$(wp import $PWD/wp-data.xml --authors=create --quiet)"
    echo -e "> Demo data has been installed"
    rm -rf $PWD/wp-data.xml
fi;

echo -e "> Done, good bye!"
exit 0;